# 闭包介绍

# 1. 闭包定义
#     在函数嵌套的前提下,内部函数使用了外部函数的变量,并且外部函数返回了内部函数,我们把这个使用外部函数变量的内部函数称为闭包

# 2. 闭包构成条件
#     1. 函数嵌套(函数里面再定义函数)的前提下
#     2. 内部函数使用了外部函数的变量(还包括外部函数的参数)
#     3. 外部函数返回了内部函数,这个使用了外部函数变量的内部函数称之为闭包

# 3. 示例代码

def funcout():
    # 外部函数
    x = 10

    def funcinner(y):
        # 内部函数
        # 内部函数使用了外部函数的变量
        result = x + y
        print('rlt', result)

    # 外部函数返回内部函数,这个使用了外部函数变量的内部函数称为闭包
    return funcinner


# 获取闭包对象
# 这个newfunc就是闭包
# 这里的newfunc = funcinner
newfunc = funcout()
# 执行闭包
newfunc(10)

# 4 闭包作用
#     闭包可以保存外部函数变量,不会随着外部函数调用完而销毁
#     由于闭包引用了外部函数的变量,则外部函数的变量没有及时释放,消耗内存闭包持有外部变量,闭包使用完成才会对外部变量进行释放

# 闭包使用

# 1. 案例
#     需求:根据配置信息使用闭包实现不同人的对话信息
#     例如:张三->到北京了没? 李四->已经到了放心吧

# 2. 实现步骤
#     1. 定义外部函数接收不同配置信息参数,参数是人名
#     2. 定义内部函数接受对话信息参数
#     3. 在内部函数里面把配置的对话信息进行拼接输出

# 3. 示例代码

# 外部函数接收姓名参数
def configName(name):
    # 内部函数保存外部函数参数,并且完成数据显示组成
    def inner(msg):
        print(name + ':' + msg)
# 外部函数返回内部函数
    return inner


# 创建mas闭包实例
mas = configName('mas')
# 创建zzs闭包实例
zzs = configName('zzs')
# 如果执行闭包,因为已经保存了name参数,以后在输入的时候都是name:XXXX
mas('你爱我吗?')
zzs('爱')


# 修改闭包内使用的外部变量
def outfunc():
    i = 10
    def innerfunc():
        # 在闭包内修改外部函数变量
        # i = 20 #本意是修改外部函数变量,其实是在闭包内定义了一个局部变量
        # 在闭包内修改外部函数变量需要使用nonlocal关键字
        nonlocal i
        i = 20
        rlt = i + 1
        print('rlt', rlt)
        
    print('修改前外部变量值:', i)
    innerfunc()
    print('修改后外部变量值:', i)

    return innerfunc


# 创建闭包对象
newfuncs = outfunc()
