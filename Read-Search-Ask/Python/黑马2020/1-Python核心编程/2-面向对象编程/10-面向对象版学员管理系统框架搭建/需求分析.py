# 面向对象版学员管理系统

# 目标
#     了解面向对象开发过程中类内部功能的分析方法
#     了解常用系统功能

# 需求
#     系统要求:学员数据存储在文件中
#     系统功能:增删改查学员信息,显示保存所有学员信息及退出系统等功能

# 准备程序文件

# 分析
#     角色分析
#         学员
#         管理系统
    
# 工作中注意事项
#     为了方便维护代码,一般一个角色一个程序文件
#     项目要有主程序入口,习惯为main.py

# 创建程序文件

# 创建项目目录,例如 StudentMangerSystem

# 编码

# student.py

# 需求
#     学员信息包含姓名,性别,手机号
#     添加__str__方法,方便查看学员对象信息

# mangerSystem.py

# 需求
#     存储数据位置:文件(student.data)
#         加载文件数据
#         修改数据后保存到文件
#     存储数据形式:列表存储学员对象
#     系统功能
#         添加学员
#         删除学员
#         修改学员
#         查询学员信息
#         显示保存所有学员信息
#         保存学员信息

# 管理系统框架
# 需求
#     系统功能循环使用,用户输入不同功能序号执行不同功能
# 步骤
#     定义程序入口函数
#         加载文件数据
#         显示功能菜单
#         用户输入不同功能序号
#         根据用户输入序号执行不同功能
#     定义系统功能函数
#         1. 添加功能
#             需求
#                 用户输入学员姓名,性别,手机号,将学员添加到系统
#             步骤
#                 用户输入姓名,性别,手机号
#                 创建这个学员对象
#                 将该学员对象添加到列表
#         2. 删除学员
#             需求
#                 用户输入目标学员姓名,如果学员存在则删除该学员
#             步骤
#                 用户输入学员姓名
#                 遍历学员数据列表,如果用户输入学员姓名存在则删除,否则则提示该学员不存在
#         3. 修改学员信息
#             需求
#                 用户输入学员目标姓名,如果学员存在则修改改学员信息
#             步骤
#                 用户输入目标学员姓名
#                 遍历学员数据列表,如果用户输入学员姓名存在则修改学员的姓名,性别,手机号数据
#         4. 查询学员信息
#             需求
#                 用户输入目标学员姓名,如果学员存在则打印该学员信息
#             步骤
#                 用户输入目标学员姓名
#                 遍历学员数据列表,如果用户输入学员姓名存在则打印该学员信息,否则提示该学员不再存在
#         5. 显示所有学员信息
#             需求
#                 打印所有学员信息
#             步骤
#                 遍历学员数据列表,打印所有学员信息
#         6. 保存学员信息
#             需求
#                 将修改后的学员数据保存到存储数据的文件
#             步骤
#                 打开文件
#                 写入数据
#                 关闭文件
#             思考
#                 1. 文件写入的数据是学员对象的内存地址吗?
#                 2. 文件内数据要求的数据类型是什么?
#             拓展
#                  __dict__
#         7. 加载学员信息
#             需求
#                 每次进入系统后,修改的数据是文件里面的数据
#             步骤
#                 尝试以'r'模式打开学员数据文件,如果文件不存在则以'w'模式打开学员数据文件
#                 如果文件存在则读取数据并存储数据
#                     读取数据
#                     转换数据类型为列表并转换列表内的字典为对象
#                     存储学员数据到学员列表
#                 关闭文件



# 拓展
#     __dict__

# 1. 创建类
class A():
    a = 0  #类属性

    def __init__(self):
        self.b = 1  #实例属性

# 2. 实例对象
sample = A()

# 3. 调用__dict__
# 返回类内部所有属性和方法对应的字典
print(A.__dict__)  #{'__module__': '__main__', 'a': 0, '__init__': <function A.__init__ at 0x000001AF25F39510>, '__dict__': <attribute '__dict__' of 'A' objects>, '__weakref__': <attribute '__weakref__' of 'A' objects>, '__doc__': None}
# 返回实例属性和值组成的字典
print(sample.__dict__)  #{'b': 1}          