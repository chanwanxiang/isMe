# 类方法

# 类方法的特点
#     需要用装饰器@classmethod来表示其为类方法,对于类方法,第一个参数必须是类对象,一般以cls作为第一个参数

# 类方法使用场景
#     当方法中需要使用类对象(如访问私有类属性等)时,定义类方法
#     类方法一般和类属性配合使用

# 定义类,私有类属性,类方法获取私有类属性
class Cat(object):
    __eyes = 2

    # 定义类方法
    @classmethod
    def getEyes(cls):
        return cls.__eyes

# 创建对象,调用类方法
mm = Cat()
print(mm.getEyes())  #2

# 静态方法

# 静态方法特点
#     需要通过装饰器@staticmethod来进行修饰,静态方法既不需要传递类对象也不需要传递实例对象(形参没有self/cls)
#     静态方法也能够通过实例对象和类对象去访问

# 静态方法使用场景
#     当方法中既不需要使用实例对象(如实例对象、实例属性),也不需要使用类对象(如类属性、类方法、创建实例等)，定义静态方法
#     取消不需要的参数传递,有利于减少不必要的内存占用和性能消耗

# 定义类,定义静态方法
class Cat2(object):

    @staticmethod
    def selfinfo():
        print('这是猫类,用于创建猫的实例对象')

# 通过类对象调用静态方法
Cat2.selfinfo()  #这是猫类,用于创建猫的实例对象

# 创建实例对象
mm = Cat2()

# 通过实例对象调用静态方法
mm.selfinfo()  #这是猫类,用于创建猫的实例对象